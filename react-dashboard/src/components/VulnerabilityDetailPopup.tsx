import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  IconButton,
  Typography,
  Chip,
  Box,
  Card,
  CardContent,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Button,
  CircularProgress,
  Alert,
} from "@mui/material";
import {
  Close as CloseIcon,
  BugReport as BugReportIcon,
  Computer as ComputerIcon,
  Assessment as AssessmentIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Info as InfoIcon,
  OpenInNew as OpenInNewIcon,
} from "@mui/icons-material";
import { db } from "../db/db";
import { VulnRow, Severity } from "../types";

interface VulnerabilityDetailPopupProps {
  open: boolean;
  onClose: () => void;
  vulnerabilityId: string | null;
  onViewFullDetails?: (vulnerabilityId: string) => void;
}

const VulnerabilityDetailPopup: React.FC<VulnerabilityDetailPopupProps> = ({
  open,
  onClose,
  vulnerabilityId,
  onViewFullDetails,
}) => {
  const [vulnerability, setVulnerability] = useState<VulnRow | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (open && vulnerabilityId) {
      loadVulnerability(vulnerabilityId);
    }
  }, [open, vulnerabilityId]);

  const loadVulnerability = async (vulnId: string) => {
    try {
      setLoading(true);
      setError(null);
      const vuln = await db.vulns.get(vulnId);
      if (vuln) {
        setVulnerability(vuln);
      } else {
        setError("Vulnerability not found");
      }
    } catch (err) {
      setError("Error loading vulnerability");
      console.error("Error loading vulnerability:", err);
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity: Severity) => {
    switch (severity) {
      case "critical":
        return "#d32f2f";
      case "high":
        return "#f57c00";
      case "medium":
        return "#fbc02d";
      case "low":
        return "#388e3c";
      default:
        return "#757575";
    }
  };

  const getKaiStatusColor = (status: string) => {
    switch (status) {
      case "invalid - norisk":
        return "#7b1fa2";
      case "ai-invalid-norisk":
        return "#f57c00";
      default:
        return "#757575";
    }
  };

  const getKaiStatusIcon = (status: string) => {
    switch (status) {
      case "invalid - norisk":
        return <CheckCircleIcon />;
      case "ai-invalid-norisk":
        return <WarningIcon />;
      default:
        return <InfoIcon />;
    }
  };

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  const getCVSSRating = (score: number) => {
    if (score >= 9.0) return "Critical";
    if (score >= 7.0) return "High";
    if (score >= 4.0) return "Medium";
    if (score >= 0.1) return "Low";
    return "None";
  };

  const handleViewFullDetails = () => {
    if (vulnerability && onViewFullDetails) {
      onViewFullDetails(vulnerability.id);
      onClose();
    }
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="lg"
      fullWidth
      PaperProps={{
        sx: {
          maxHeight: "90vh",
          width: { xs: "95vw", sm: "90vw", md: "80vw", lg: "70vw" },
          maxWidth: "1200px",
        },
      }}
    >
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Typography variant="h6" component="div">
            Vulnerability Details
          </Typography>
          <IconButton onClick={onClose} size="small">
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent dividers>
        {loading && (
          <Box display="flex" justifyContent="center" p={3}>
            <CircularProgress />
          </Box>
        )}

        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        {vulnerability && !loading && (
          <Box
            sx={{
              "& .MuiListItemText-secondary": {
                wordBreak: "break-word",
                overflowWrap: "break-word",
              },
            }}
          >
            <Card sx={{ mb: 2 }}>
              <CardContent>
                <Box
                  display="flex"
                  justifyContent="space-between"
                  alignItems="center"
                  mb={2}
                >
                  <Typography variant="h5" fontWeight="bold">
                    {vulnerability.cve || "Unknown CVE"}
                  </Typography>
                  <Box display="flex" gap={1}>
                    <Chip
                      label={vulnerability.severity.toUpperCase()}
                      sx={{
                        backgroundColor: getSeverityColor(
                          vulnerability.severity
                        ),
                        color: "white",
                        fontWeight: "bold",
                      }}
                    />
                    <Chip
                      icon={getKaiStatusIcon(vulnerability.kaiStatus || "new")}
                      label={
                        vulnerability.kaiStatus
                          ? vulnerability.kaiStatus.replace("_", " ")
                          : "Unknown"
                      }
                      sx={{
                        backgroundColor: getKaiStatusColor(
                          vulnerability.kaiStatus || "new"
                        ),
                        color: "white",
                      }}
                    />
                  </Box>
                </Box>

                <Typography
                  variant="body1"
                  color="text.secondary"
                  sx={{
                    wordBreak: "break-word",
                    overflowWrap: "break-word",
                    whiteSpace: "pre-wrap",
                  }}
                >
                  {vulnerability.description || "No description available"}
                </Typography>
              </CardContent>
            </Card>

            <Box
              display="flex"
              flexDirection={{ xs: "column", sm: "row" }}
              gap={2}
              mb={2}
            >
              <Box flex={1} minHeight={200}>
                <Card sx={{ height: "100%" }}>
                  <CardContent>
                    <Typography
                      variant="h6"
                      gutterBottom
                      display="flex"
                      alignItems="center"
                      gap={1}
                    >
                      <AssessmentIcon />
                      CVSS Information
                    </Typography>
                    <Divider sx={{ mb: 2 }} />
                    <List dense>
                      <ListItem>
                        <ListItemText
                          primary="CVSS Score"
                          secondary={
                            vulnerability.cvss
                              ? `${vulnerability.cvss.toFixed(
                                  1
                                )} (${getCVSSRating(vulnerability.cvss)})`
                              : "N/A"
                          }
                        />
                      </ListItem>
                    </List>
                  </CardContent>
                </Card>
              </Box>

              <Box flex={1} minHeight={200}>
                <Card sx={{ height: "100%" }}>
                  <CardContent>
                    <Typography
                      variant="h6"
                      gutterBottom
                      display="flex"
                      alignItems="center"
                      gap={1}
                    >
                      <BugReportIcon />
                      Package Information
                    </Typography>
                    <Divider sx={{ mb: 2 }} />
                    <List dense>
                      <ListItem>
                        <ListItemText
                          primary="Package Name"
                          secondary={vulnerability.packageName || "N/A"}
                        />
                      </ListItem>
                      <ListItem>
                        <ListItemText
                          primary="Package Version"
                          secondary={vulnerability.packageVersion || "N/A"}
                        />
                      </ListItem>
                      <ListItem>
                        <ListItemText
                          primary="Package Type"
                          secondary={vulnerability.packageType || "N/A"}
                        />
                      </ListItem>
                    </List>
                  </CardContent>
                </Card>
              </Box>
            </Box>

            <Box
              display="flex"
              flexDirection={{ xs: "column", sm: "row" }}
              gap={2}
              mb={2}
            >
              <Box flex={1} minHeight={200}>
                <Card sx={{ height: "100%" }}>
                  <CardContent>
                    <Typography
                      variant="h6"
                      gutterBottom
                      display="flex"
                      alignItems="center"
                      gap={1}
                    >
                      <ComputerIcon />
                      Image Information
                    </Typography>
                    <Divider sx={{ mb: 2 }} />
                    <List dense>
                      <ListItem>
                        <ListItemText
                          primary="Image Name"
                          secondary={vulnerability.imageName || "N/A"}
                        />
                      </ListItem>
                      <ListItem>
                        <ListItemText
                          primary="Image Version"
                          secondary={vulnerability.imageVersion || "N/A"}
                        />
                      </ListItem>
                      <ListItem>
                        <ListItemText
                          primary="Repository"
                          secondary={vulnerability.repo || "N/A"}
                        />
                      </ListItem>
                    </List>
                  </CardContent>
                </Card>
              </Box>

              <Box flex={1} minHeight={200}>
                <Card sx={{ height: "100%" }}>
                  <CardContent>
                    <Typography
                      variant="h6"
                      gutterBottom
                      display="flex"
                      alignItems="center"
                      gap={1}
                    >
                      <InfoIcon />
                      Timeline
                    </Typography>
                    <Divider sx={{ mb: 2 }} />
                    <List dense>
                      <ListItem>
                        <ListItemIcon>
                          <AssessmentIcon />
                        </ListItemIcon>
                        <ListItemText
                          primary="Discovered"
                          secondary={
                            vulnerability.discoveredAt
                              ? formatDate(vulnerability.discoveredAt)
                              : "N/A"
                          }
                        />
                      </ListItem>
                      {vulnerability.publishedAt && (
                        <ListItem>
                          <ListItemIcon>
                            <InfoIcon />
                          </ListItemIcon>
                          <ListItemText
                            primary="Published"
                            secondary={formatDate(vulnerability.publishedAt)}
                          />
                        </ListItem>
                      )}
                      {vulnerability.fixDate && (
                        <ListItem>
                          <ListItemIcon>
                            <CheckCircleIcon />
                          </ListItemIcon>
                          <ListItemText
                            primary="Fixed"
                            secondary={formatDate(vulnerability.fixDate)}
                          />
                        </ListItem>
                      )}
                    </List>
                  </CardContent>
                </Card>
              </Box>
            </Box>

            {vulnerability.riskFactors &&
              vulnerability.riskFactors.length > 0 && (
                <Card sx={{ mt: 2 }}>
                  <CardContent>
                    <Typography
                      variant="h6"
                      gutterBottom
                      display="flex"
                      alignItems="center"
                      gap={1}
                    >
                      <WarningIcon />
                      Risk Factors
                    </Typography>
                    <Divider sx={{ mb: 2 }} />
                    <Box display="flex" flexWrap="wrap" gap={1}>
                      {vulnerability.riskFactors.map((factor, index) => (
                        <Chip
                          key={index}
                          label={factor}
                          color="warning"
                          variant="outlined"
                          size="small"
                        />
                      ))}
                    </Box>
                  </CardContent>
                </Card>
              )}
          </Box>
        )}
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose}>Close</Button>
        {vulnerability && onViewFullDetails && (
          <Button
            variant="contained"
            startIcon={<OpenInNewIcon />}
            onClick={handleViewFullDetails}
          >
            View Full Details
          </Button>
        )}
      </DialogActions>
    </Dialog>
  );
};

export default VulnerabilityDetailPopup;
