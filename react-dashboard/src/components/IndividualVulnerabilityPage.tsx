import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  Box,
  Paper,
  Typography,
  Chip,
  IconButton,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Alert,
  CircularProgress,
} from "@mui/material";
import {
  ArrowBack as ArrowBackIcon,
  Security as SecurityIcon,
  BugReport as BugReportIcon,
  Computer as ComputerIcon,
  Assessment as AssessmentIcon,
  Schedule as ScheduleIcon,
  Info as InfoIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
} from "@mui/icons-material";
import { db } from "../db/db";
import { VulnRow, Severity } from "../types";

interface IndividualVulnerabilityPageProps {}

const IndividualVulnerabilityPage: React.FC<
  IndividualVulnerabilityPageProps
> = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [vulnerability, setVulnerability] = useState<VulnRow | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadVulnerability(id);
    }
  }, [id]);

  const loadVulnerability = async (vulnId: string) => {
    try {
      setLoading(true);
      const vuln = await db.vulns.get(vulnId);
      if (vuln) {
        setVulnerability(vuln);
      } else {
        setError("Vulnerability not found");
      }
    } catch (err) {
      setError("Error loading vulnerability");
      console.error("Error loading vulnerability:", err);
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity: Severity) => {
    switch (severity) {
      case "critical":
        return "#d32f2f";
      case "high":
        return "#f57c00";
      case "medium":
        return "#fbc02d";
      case "low":
        return "#388e3c";
      default:
        return "#757575";
    }
  };

  const getKaiStatusColor = (status: string) => {
    switch (status) {
      case "invalid - norisk":
        return "#7b1fa2";
      case "ai-invalid-norisk":
        return "#f57c00";
      default:
        return "#757575";
    }
  };

  const getKaiStatusIcon = (status: string) => {
    switch (status) {
      case "invalid - norisk":
        return <CheckCircleIcon />;
      case "ai-invalid-norisk":
        return <WarningIcon />;
      default:
        return <InfoIcon />;
    }
  };

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const getCVSSRating = (score: number) => {
    if (score >= 9.0) return "Critical";
    if (score >= 7.0) return "High";
    if (score >= 4.0) return "Medium";
    if (score >= 0.1) return "Low";
    return "None";
  };

  if (loading) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        alignItems="center"
        minHeight="100vh"
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error || !vulnerability) {
    return (
      <Box className="individual-vulnerability-page">
        <Box className="vulnerability-header">
          <Box display="flex" alignItems="center" gap={2} mb={2}>
            <IconButton onClick={() => navigate("/vulnerabilities")}>
              <ArrowBackIcon />
            </IconButton>
            <Typography variant="h4" component="h1">
              Vulnerability Details
            </Typography>
          </Box>
          <Alert severity="error">{error || "Vulnerability not found"}</Alert>
        </Box>
      </Box>
    );
  }

  return (
    <Box className="individual-vulnerability-page">
      <Box className="vulnerability-header">
        <Box display="flex" alignItems="center" gap={2} mb={2}>
          <IconButton onClick={() => navigate("/vulnerabilities")}>
            <ArrowBackIcon />
          </IconButton>
          <Typography variant="h4" component="h1">
            {vulnerability.cve || "Unknown CVE"}
          </Typography>
          <Chip
            label={vulnerability.severity.toUpperCase()}
            sx={{
              backgroundColor: getSeverityColor(vulnerability.severity),
              color: "white",
              fontWeight: "bold",
              fontSize: "0.875rem",
            }}
          />
        </Box>
      </Box>

      <Box display="flex" flexDirection={{ xs: "column", md: "row" }} gap={3}>
        <Box flex={2}>
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography
              variant="h5"
              gutterBottom
              display="flex"
              alignItems="center"
              gap={1}
            >
              <SecurityIcon />
              Vulnerability Information
            </Typography>
            <Divider sx={{ mb: 2 }} />

            <Box display="flex" flexDirection="column" gap={2}>
              <Box
                display="flex"
                flexDirection={{ xs: "column", sm: "row" }}
                gap={2}
              >
                <Box flex={1}>
                  <Typography variant="subtitle2" color="text.secondary">
                    CVE ID
                  </Typography>
                  <Typography variant="body1" fontWeight="bold">
                    {vulnerability.cve || "N/A"}
                  </Typography>
                </Box>

                <Box flex={1}>
                  <Typography variant="subtitle2" color="text.secondary">
                    Severity
                  </Typography>
                  <Chip
                    label={vulnerability.severity.toUpperCase()}
                    sx={{
                      backgroundColor: getSeverityColor(vulnerability.severity),
                      color: "white",
                      fontWeight: "bold",
                    }}
                  />
                </Box>
              </Box>

              <Box
                display="flex"
                flexDirection={{ xs: "column", sm: "row" }}
                gap={2}
              >
                <Box flex={1}>
                  <Typography variant="subtitle2" color="text.secondary">
                    CVSS Score
                  </Typography>
                  <Typography variant="h6" color="primary">
                    {vulnerability.cvss ? vulnerability.cvss.toFixed(1) : "N/A"}
                    {vulnerability.cvss && (
                      <Typography
                        component="span"
                        variant="body2"
                        color="text.secondary"
                        sx={{ ml: 1 }}
                      >
                        ({getCVSSRating(vulnerability.cvss)})
                      </Typography>
                    )}
                  </Typography>
                </Box>

                <Box flex={1}>
                  <Typography variant="subtitle2" color="text.secondary">
                    Kai Status
                  </Typography>
                  <Chip
                    icon={getKaiStatusIcon(vulnerability.kaiStatus || "new")}
                    label={
                      vulnerability.kaiStatus
                        ? vulnerability.kaiStatus.replace("_", " ")
                        : "Unknown"
                    }
                    sx={{
                      backgroundColor: getKaiStatusColor(
                        vulnerability.kaiStatus || "new"
                      ),
                      color: "white",
                    }}
                  />
                </Box>
              </Box>

              <Box>
                <Typography variant="subtitle2" color="text.secondary">
                  Description
                </Typography>
                <Typography variant="body1">
                  {vulnerability.description || "No description available"}
                </Typography>
              </Box>
            </Box>
          </Paper>

          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography
              variant="h5"
              gutterBottom
              display="flex"
              alignItems="center"
              gap={1}
            >
              <BugReportIcon />
              Package Information
            </Typography>
            <Divider sx={{ mb: 2 }} />

            <Box display="flex" flexDirection="column" gap={2}>
              <Box
                display="flex"
                flexDirection={{ xs: "column", sm: "row" }}
                gap={2}
              >
                <Box flex={1}>
                  <Typography variant="subtitle2" color="text.secondary">
                    Package Name
                  </Typography>
                  <Typography variant="body1" fontWeight="bold">
                    {vulnerability.packageName || "N/A"}
                  </Typography>
                </Box>

                <Box flex={1}>
                  <Typography variant="subtitle2" color="text.secondary">
                    Package Version
                  </Typography>
                  <Typography variant="body1">
                    {vulnerability.packageVersion || "N/A"}
                  </Typography>
                </Box>
              </Box>

              <Box
                display="flex"
                flexDirection={{ xs: "column", sm: "row" }}
                gap={2}
              >
                <Box flex={1}>
                  <Typography variant="subtitle2" color="text.secondary">
                    Package Type
                  </Typography>
                  <Typography variant="body1">
                    {vulnerability.packageType || "N/A"}
                  </Typography>
                </Box>

                <Box flex={1}>
                  <Typography variant="subtitle2" color="text.secondary">
                    Image Name
                  </Typography>
                  <Typography variant="body1">
                    {vulnerability.imageName || "N/A"}
                  </Typography>
                </Box>
              </Box>
            </Box>
          </Paper>

          {vulnerability.riskFactors &&
            vulnerability.riskFactors.length > 0 && (
              <Paper sx={{ p: 3, mb: 3 }}>
                <Typography
                  variant="h5"
                  gutterBottom
                  display="flex"
                  alignItems="center"
                  gap={1}
                >
                  <WarningIcon />
                  Risk Factors
                </Typography>
                <Divider sx={{ mb: 2 }} />
                <Box display="flex" flexWrap="wrap" gap={1}>
                  {vulnerability.riskFactors.map((factor, index) => (
                    <Chip
                      key={index}
                      label={factor}
                      color="warning"
                      variant="outlined"
                      size="small"
                    />
                  ))}
                </Box>
              </Paper>
            )}

          {vulnerability.tags && vulnerability.tags.length > 0 && (
            <Paper sx={{ p: 3 }}>
              <Typography
                variant="h5"
                gutterBottom
                display="flex"
                alignItems="center"
                gap={1}
              >
                <InfoIcon />
                Tags
              </Typography>
              <Divider sx={{ mb: 2 }} />
              <Box display="flex" flexWrap="wrap" gap={1}>
                {vulnerability.tags.map((tag, index) => (
                  <Chip
                    key={index}
                    label={tag}
                    variant="outlined"
                    size="small"
                  />
                ))}
              </Box>
            </Paper>
          )}
        </Box>

        <Box flex={1}>
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography
              variant="h6"
              gutterBottom
              display="flex"
              alignItems="center"
              gap={1}
            >
              <ScheduleIcon />
              Timeline
            </Typography>
            <Divider sx={{ mb: 2 }} />
            <List dense>
              <ListItem>
                <ListItemIcon>
                  <AssessmentIcon />
                </ListItemIcon>
                <ListItemText
                  primary="Discovered"
                  secondary={
                    vulnerability.discoveredAt
                      ? formatDate(vulnerability.discoveredAt)
                      : "N/A"
                  }
                />
              </ListItem>
              {vulnerability.publishedAt && (
                <ListItem>
                  <ListItemIcon>
                    <InfoIcon />
                  </ListItemIcon>
                  <ListItemText
                    primary="Published"
                    secondary={formatDate(vulnerability.publishedAt)}
                  />
                </ListItem>
              )}
              {vulnerability.fixDate && (
                <ListItem>
                  <ListItemIcon>
                    <CheckCircleIcon />
                  </ListItemIcon>
                  <ListItemText
                    primary="Fixed"
                    secondary={formatDate(vulnerability.fixDate)}
                  />
                </ListItem>
              )}
            </List>
          </Paper>

          {vulnerability.cvss && (
            <Paper sx={{ p: 3, mb: 3 }}>
              <Typography
                variant="h6"
                gutterBottom
                display="flex"
                alignItems="center"
                gap={1}
              >
                <AssessmentIcon />
                CVSS Breakdown
              </Typography>
              <Divider sx={{ mb: 2 }} />
              <List dense>
                <ListItem>
                  <ListItemText
                    primary="Base Score"
                    secondary={vulnerability.cvss.toFixed(1)}
                  />
                </ListItem>
                {vulnerability.exploitabilityScore && (
                  <ListItem>
                    <ListItemText
                      primary="Exploitability Score"
                      secondary={vulnerability.exploitabilityScore.toFixed(1)}
                    />
                  </ListItem>
                )}
                {vulnerability.impactScore && (
                  <ListItem>
                    <ListItemText
                      primary="Impact Score"
                      secondary={vulnerability.impactScore.toFixed(1)}
                    />
                  </ListItem>
                )}
              </List>
            </Paper>
          )}

          <Paper sx={{ p: 3 }}>
            <Typography
              variant="h6"
              gutterBottom
              display="flex"
              alignItems="center"
              gap={1}
            >
              <ComputerIcon />
              Image Details
            </Typography>
            <Divider sx={{ mb: 2 }} />
            <List dense>
              <ListItem>
                <ListItemText
                  primary="Image ID"
                  secondary={vulnerability.imageId || "N/A"}
                />
              </ListItem>
              <ListItem>
                <ListItemText
                  primary="Image Name"
                  secondary={vulnerability.imageName || "N/A"}
                />
              </ListItem>
              <ListItem>
                <ListItemText
                  primary="Image Version"
                  secondary={vulnerability.imageVersion || "N/A"}
                />
              </ListItem>
              <ListItem>
                <ListItemText
                  primary="Repository"
                  secondary={vulnerability.repo || "N/A"}
                />
              </ListItem>
              <ListItem>
                <ListItemText
                  primary="Group"
                  secondary={vulnerability.group || "N/A"}
                />
              </ListItem>
            </List>
          </Paper>
        </Box>
      </Box>
    </Box>
  );
};

export default IndividualVulnerabilityPage;
