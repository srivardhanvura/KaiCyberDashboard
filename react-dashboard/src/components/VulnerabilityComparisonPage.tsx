import React, { useState, useEffect, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import {
  Box,
  Paper,
  Typography,
  Chip,
  Button,
  IconButton,
  Card,
  CardContent,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Alert,
  CircularProgress,
  Divider,
  Badge,
} from "@mui/material";
import {
  ArrowBack as ArrowBackIcon,
  Compare as CompareIcon,
  Remove as RemoveIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Clear as ClearIcon,
  Search as SearchIcon,
} from "@mui/icons-material";
import { db } from "../db/db";
import { VulnRow, Severity } from "../types";
import "./VulnerabilityComparisonPage.css";

interface VulnerabilityComparisonPageProps {}

const VulnerabilityComparisonPage: React.FC<
  VulnerabilityComparisonPageProps
> = () => {
  const navigate = useNavigate();
  const [vulnerabilities, setVulnerabilities] = useState<VulnRow[]>([]);
  const [selectedVulns, setSelectedVulns] = useState<VulnRow[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    loadVulnerabilities();
  }, []);

  const loadVulnerabilities = async () => {
    try {
      setLoading(true);
      const allVulns = await db.vulns.toArray();
      setVulnerabilities(allVulns);
    } catch (error) {
      console.error("Error loading vulnerabilities:", error);
    } finally {
      setLoading(false);
    }
  };

  const filteredVulnerabilities = useMemo(() => {
    if (!searchTerm) return vulnerabilities;

    return vulnerabilities.filter(
      (vuln) =>
        vuln.cve?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.packageName?.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [vulnerabilities, searchTerm]);

  const getSeverityColor = (severity: Severity) => {
    switch (severity) {
      case "critical":
        return "#d32f2f";
      case "high":
        return "#f57c00";
      case "medium":
        return "#fbc02d";
      case "low":
        return "#388e3c";
      default:
        return "#757575";
    }
  };

  const getKaiStatusColor = (status: string) => {
    switch (status) {
      case "invalid - norisk":
        return "#7b1fa2";
      case "ai-invalid-norisk":
        return "#f57c00";
      default:
        return "#757575";
    }
  };

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString();
  };

  const getCVSSRating = (score: number) => {
    if (score >= 9.0) return "Critical";
    if (score >= 7.0) return "High";
    if (score >= 4.0) return "Medium";
    if (score >= 0.1) return "Low";
    return "None";
  };

  const handleAddVulnerability = (vuln: VulnRow) => {
    if (selectedVulns.length >= 4) {
      alert("Maximum 4 vulnerabilities can be compared at once");
      return;
    }
    if (!selectedVulns.find((v) => v.id === vuln.id)) {
      setSelectedVulns([...selectedVulns, vuln]);
    }
  };

  const handleRemoveVulnerability = (vulnId: string) => {
    setSelectedVulns(selectedVulns.filter((v) => v.id !== vulnId));
  };

  const handleClearAll = () => {
    setSelectedVulns([]);
  };

  const comparisonFields = [
    { key: "cve", label: "CVE ID", type: "text" },
    { key: "severity", label: "Severity", type: "chip" },
    { key: "cvss", label: "CVSS Score", type: "number" },
    { key: "kaiStatus", label: "Kai Status", type: "chip" },
    { key: "packageName", label: "Package", type: "text" },
    { key: "packageVersion", label: "Version", type: "text" },
    { key: "imageName", label: "Image", type: "text" },
    { key: "discoveredAt", label: "Discovered", type: "date" },
    { key: "description", label: "Description", type: "text" },
  ];

  const renderFieldValue = (vuln: VulnRow, field: any) => {
    const value = vuln[field.key as keyof VulnRow];

    switch (field.type) {
      case "chip":
        if (field.key === "severity") {
          return (
            <Chip
              label={value || "N/A"}
              size="small"
              sx={{
                backgroundColor: getSeverityColor(value as Severity),
                color: "white",
                fontWeight: "bold",
              }}
            />
          );
        } else if (field.key === "kaiStatus") {
          return (
            <Chip
              label={value ? (value as string).replace("_", " ") : "Unknown"}
              size="small"
              sx={{
                backgroundColor: getKaiStatusColor((value as string) || "new"),
                color: "white",
              }}
            />
          );
        }
        return value || "N/A";

      case "number":
        if (field.key === "cvss") {
          const score = value as number;
          return score
            ? `${score.toFixed(1)} (${getCVSSRating(score)})`
            : "N/A";
        }
        return value || "N/A";

      case "date":
        return value ? formatDate(value as number) : "N/A";

      case "text":
      default:
        return value || "N/A";
    }
  };

  if (loading) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        alignItems="center"
        minHeight="100vh"
      >
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box className="vulnerability-comparison-page">
      <Box className="comparison-header">
        <Box display="flex" alignItems="center" gap={2} mb={2}>
          <IconButton onClick={() => navigate("/vulnerabilities")}>
            <ArrowBackIcon />
          </IconButton>
          <Typography variant="h4" component="h1">
            Vulnerability Comparison
          </Typography>
          <Badge badgeContent={selectedVulns.length} color="primary">
            <CompareIcon />
          </Badge>
        </Box>
      </Box>

      <Box display="flex" flexDirection={{ xs: "column", md: "row" }} gap={3}>
        <Box flex={1} minWidth="300px">
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography
              variant="h6"
              gutterBottom
              display="flex"
              alignItems="center"
              gap={1}
            >
              <SearchIcon />
              Search Vulnerabilities
            </Typography>
            <Divider sx={{ mb: 2 }} />

            <TextField
              fullWidth
              label="Search CVE, Package, or Description"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              sx={{ mb: 2 }}
            />

            <Box sx={{ maxHeight: 400, overflow: "auto" }}>
              {filteredVulnerabilities.slice(0, 50).map((vuln) => (
                <Card
                  key={vuln.id}
                  sx={{
                    mb: 1,
                    cursor: "pointer",
                    opacity: selectedVulns.find((v) => v.id === vuln.id)
                      ? 0.5
                      : 1,
                    "&:hover": { backgroundColor: "action.hover" },
                  }}
                  onClick={() => handleAddVulnerability(vuln)}
                >
                  <CardContent sx={{ p: 2, "&:last-child": { pb: 2 } }}>
                    <Box
                      display="flex"
                      justifyContent="space-between"
                      alignItems="center"
                    >
                      <Box>
                        <Typography variant="subtitle2" fontWeight="bold">
                          {vuln.cve || "Unknown CVE"}
                        </Typography>
                        <Typography
                          variant="body2"
                          color="text.secondary"
                          noWrap
                        >
                          {vuln.packageName || "Unknown Package"}
                        </Typography>
                      </Box>
                      <Box display="flex" gap={1} alignItems="center">
                        <Chip
                          label={vuln.severity}
                          size="small"
                          sx={{
                            backgroundColor: getSeverityColor(vuln.severity),
                            color: "white",
                            fontWeight: "bold",
                          }}
                        />
                        {selectedVulns.find((v) => v.id === vuln.id) && (
                          <CheckCircleIcon color="primary" />
                        )}
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              ))}
            </Box>
          </Paper>
        </Box>

        <Box flex={2}>
          <Paper sx={{ p: 3 }}>
            <Box
              display="flex"
              justifyContent="space-between"
              alignItems="center"
              mb={2}
            >
              <Typography
                variant="h6"
                display="flex"
                alignItems="center"
                gap={1}
              >
                <CompareIcon />
                Comparison Results
                {selectedVulns.length > 0 && (
                  <Chip
                    label={`${selectedVulns.length} selected`}
                    size="small"
                  />
                )}
              </Typography>
              {selectedVulns.length > 0 && (
                <Button
                  startIcon={<ClearIcon />}
                  onClick={handleClearAll}
                  size="small"
                  color="secondary"
                >
                  Clear All
                </Button>
              )}
            </Box>
            <Divider sx={{ mb: 2 }} />

            {selectedVulns.length === 0 ? (
              <Alert severity="info">
                Select vulnerabilities from the search panel to compare them.
              </Alert>
            ) : (
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell sx={{ fontWeight: "bold", minWidth: 150 }}>
                        Field
                      </TableCell>
                      {selectedVulns.map((vuln) => (
                        <TableCell
                          key={vuln.id}
                          sx={{ fontWeight: "bold", minWidth: 200 }}
                        >
                          <Box
                            display="flex"
                            justifyContent="space-between"
                            alignItems="center"
                          >
                            <Box>
                              <Typography variant="subtitle2" fontWeight="bold">
                                {vuln.cve || "Unknown CVE"}
                              </Typography>
                              <Typography
                                variant="caption"
                                color="text.secondary"
                              >
                                {vuln.packageName || "Unknown Package"}
                              </Typography>
                            </Box>
                            <IconButton
                              size="small"
                              onClick={() => handleRemoveVulnerability(vuln.id)}
                            >
                              <RemoveIcon />
                            </IconButton>
                          </Box>
                        </TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {comparisonFields.map((field) => (
                      <TableRow key={field.key}>
                        <TableCell
                          sx={{
                            fontWeight: "bold",
                            backgroundColor: "background.paper",
                            borderRight: "1px solid",
                            borderColor: "divider",
                          }}
                        >
                          {field.label}
                        </TableCell>
                        {selectedVulns.map((vuln) => (
                          <TableCell key={`${vuln.id}-${field.key}`}>
                            {renderFieldValue(vuln, field)}
                          </TableCell>
                        ))}
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </Paper>
        </Box>
      </Box>

      {selectedVulns.length > 0 && (
        <Paper sx={{ p: 3, mt: 3 }}>
          <Typography
            variant="h6"
            gutterBottom
            display="flex"
            alignItems="center"
            gap={1}
          >
            <WarningIcon />
            Risk Factors Comparison
          </Typography>
          <Divider sx={{ mb: 2 }} />

          <Box
            display="flex"
            flexDirection={{ xs: "column", md: "row" }}
            gap={2}
          >
            {selectedVulns.map((vuln) => (
              <Box flex={1} key={vuln.id}>
                <Card>
                  <CardContent>
                    <Typography
                      variant="subtitle2"
                      fontWeight="bold"
                      gutterBottom
                    >
                      {vuln.cve || "Unknown CVE"}
                    </Typography>
                    <Box display="flex" flexWrap="wrap" gap={0.5}>
                      {(vuln.riskFactors || []).map((factor, index) => (
                        <Chip
                          key={index}
                          label={factor}
                          size="small"
                          color="warning"
                          variant="outlined"
                        />
                      ))}
                      {(!vuln.riskFactors || vuln.riskFactors.length === 0) && (
                        <Typography variant="body2" color="text.secondary">
                          No risk factors identified
                        </Typography>
                      )}
                    </Box>
                  </CardContent>
                </Card>
              </Box>
            ))}
          </Box>
        </Paper>
      )}
    </Box>
  );
};

export default VulnerabilityComparisonPage;
